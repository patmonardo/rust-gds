
error[E0277]: the trait bound `f64: From<i64>` is not satisfied
    --> gds/src/collections/macros/backends/huge.rs:135:64
     |
 135 |   ...   fn mean(&self) -> Option<f64> where $element_type: Into<f64> { if self.size() == 0 { None } else { Some(self.iter().map(|x| x.into(...
     |                                                            ^^^^^^^^^ the trait `From<i64>` is not implemented for `f64`
     |
    ::: gds/src/collections/backends/huge/huge_long_array.rs:1006:1
     |
1006 | / huge_collections!(
1007 | |     HugeLongArray,
1008 | |     i64,
1009 | |     ValueType::Long,
...    |
1014 | |     "Collections impl for HugeLongArray"
1015 | | );
     | |_- in this macro invocation
     |
     = help: the following other types implement trait `From<T>`:
               `f64` implements `From<bool>`
               `f64` implements `From<f16>`
               `f64` implements `From<f32>`
               `f64` implements `From<i16>`
               `f64` implements `From<i32>`
               `f64` implements `From<i8>`
               `f64` implements `From<u16>`
               `f64` implements `From<u32>`
             and 3 others
     = note: required for `i64` to implement `Into<f64>`
note: the requirement `i64: Into<f64>` appears on the `impl`'s method `mean` but not on the corresponding trait's method
    --> gds/src/collections/traits/collections.rs:36:8
     |
  11 | pub trait Collections<T>: Send + Sync {
     |           ----------- in this trait
...
  36 |     fn mean(&self) -> Option<f64>;
     |        ^^^^ this trait's method doesn't have the requirement `i64: Into<f64>`
     = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `f64: From<i64>` is not satisfied
    --> gds/src/collections/macros/backends/huge.rs:136:67
     |
 136 |   ...   fn std_dev(&self) -> Option<f64> where $element_type: Into<f64> { if self.size() < 2 { None } else { let m = self.mean()?; let v = ...
     |                                                               ^^^^^^^^^ the trait `From<i64>` is not implemented for `f64`
     |
    ::: gds/src/collections/backends/huge/huge_long_array.rs:1006:1
     |
1006 | / huge_collections!(
1007 | |     HugeLongArray,
1008 | |     i64,
1009 | |     ValueType::Long,
...    |
1014 | |     "Collections impl for HugeLongArray"
1015 | | );
     | |_- in this macro invocation
     |
     = help: the following other types implement trait `From<T>`:
               `f64` implements `From<bool>`
               `f64` implements `From<f16>`
               `f64` implements `From<f32>`
               `f64` implements `From<i16>`
               `f64` implements `From<i32>`
               `f64` implements `From<i8>`
               `f64` implements `From<u16>`
               `f64` implements `From<u32>`
             and 3 others
     = note: required for `i64` to implement `Into<f64>`
note: the requirement `i64: Into<f64>` appears on the `impl`'s method `std_dev` but not on the corresponding trait's method
    --> gds/src/collections/traits/collections.rs:39:8
     |
  11 | pub trait Collections<T>: Send + Sync {
     |           ----------- in this trait
...
  39 |     fn std_dev(&self) -> Option<f64>;
     |        ^^^^^^^ this trait's method doesn't have the requirement `i64: Into<f64>`
     = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `f64: From<i64>` is not satisfied
    --> gds/src/collections/macros/backends/huge.rs:137:68
     |
 137 |   ...   fn variance(&self) -> Option<f64> where $element_type: Into<f64> { if self.size() < 2 { None } else { let m = self.mean()?; Some(se...
     |                                                                ^^^^^^^^^ the trait `From<i64>` is not implemented for `f64`
     |
    ::: gds/src/collections/backends/huge/huge_long_array.rs:1006:1
     |
1006 | / huge_collections!(
1007 | |     HugeLongArray,
1008 | |     i64,
1009 | |     ValueType::Long,
...    |
1014 | |     "Collections impl for HugeLongArray"
1015 | | );
     | |_- in this macro invocation
     |
     = help: the following other types implement trait `From<T>`:
               `f64` implements `From<bool>`
               `f64` implements `From<f16>`
               `f64` implements `From<f32>`
               `f64` implements `From<i16>`
               `f64` implements `From<i32>`
               `f64` implements `From<i8>`
               `f64` implements `From<u16>`
               `f64` implements `From<u32>`
             and 3 others
     = note: required for `i64` to implement `Into<f64>`
note: the requirement `i64: Into<f64>` appears on the `impl`'s method `variance` but not on the corresponding trait's method
    --> gds/src/collections/traits/collections.rs:42:8
     |
  11 | pub trait Collections<T>: Send + Sync {
     |           ----------- in this trait
...
  42 |     fn variance(&self) -> Option<f64>;
     |        ^^^^^^^^ this trait's method doesn't have the requirement `i64: Into<f64>`
     = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `f64: From<char>` is not satisfied
   --> gds/src/collections/macros/backends/huge.rs:135:64
    |
135 |   ...   fn mean(&self) -> Option<f64> where $element_type: Into<f64> { if self.size() == 0 { None } else { Some(self.iter().map(|x| x.into(...
    |                                                            ^^^^^^^^^ the trait `From<char>` is not implemented for `f64`
    |
   ::: gds/src/collections/backends/huge/huge_char_array.rs:697:1
    |
697 | / huge_collections!(
698 | |     HugeCharArray,
699 | |     char,
700 | |     ValueType::Char,
...   |
705 | |     "Collections impl for HugeCharArray"
706 | | );
    | |_- in this macro invocation
    |
    = help: the following other types implement trait `From<T>`:
              `f64` implements `From<bool>`
              `f64` implements `From<f16>`
              `f64` implements `From<f32>`
              `f64` implements `From<i16>`
              `f64` implements `From<i32>`
              `f64` implements `From<i8>`
              `f64` implements `From<u16>`
              `f64` implements `From<u32>`
            and 3 others
    = note: required for `char` to implement `Into<f64>`
note: the requirement `char: Into<f64>` appears on the `impl`'s method `mean` but not on the corresponding trait's method
   --> gds/src/collections/traits/collections.rs:36:8
    |
 11 | pub trait Collections<T>: Send + Sync {
    |           ----------- in this trait
...
 36 |     fn mean(&self) -> Option<f64>;
    |        ^^^^ this trait's method doesn't have the requirement `char: Into<f64>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `f64: From<char>` is not satisfied
   --> gds/src/collections/macros/backends/huge.rs:136:67
    |
136 |   ...   fn std_dev(&self) -> Option<f64> where $element_type: Into<f64> { if self.size() < 2 { None } else { let m = self.mean()?; let v = ...
    |                                                               ^^^^^^^^^ the trait `From<char>` is not implemented for `f64`
    |
   ::: gds/src/collections/backends/huge/huge_char_array.rs:697:1
    |
697 | / huge_collections!(
698 | |     HugeCharArray,
699 | |     char,
700 | |     ValueType::Char,
...   |
705 | |     "Collections impl for HugeCharArray"
706 | | );
    | |_- in this macro invocation
    |
    = help: the following other types implement trait `From<T>`:
              `f64` implements `From<bool>`
              `f64` implements `From<f16>`
              `f64` implements `From<f32>`
              `f64` implements `From<i16>`
              `f64` implements `From<i32>`
              `f64` implements `From<i8>`
              `f64` implements `From<u16>`
              `f64` implements `From<u32>`
            and 3 others
    = note: required for `char` to implement `Into<f64>`
note: the requirement `char: Into<f64>` appears on the `impl`'s method `std_dev` but not on the corresponding trait's method
   --> gds/src/collections/traits/collections.rs:39:8
    |
 11 | pub trait Collections<T>: Send + Sync {
    |           ----------- in this trait
...
 39 |     fn std_dev(&self) -> Option<f64>;
    |        ^^^^^^^ this trait's method doesn't have the requirement `char: Into<f64>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `f64: From<char>` is not satisfied
   --> gds/src/collections/macros/backends/huge.rs:137:68
    |
137 |   ...   fn variance(&self) -> Option<f64> where $element_type: Into<f64> { if self.size() < 2 { None } else { let m = self.mean()?; Some(se...
    |                                                                ^^^^^^^^^ the trait `From<char>` is not implemented for `f64`
    |
   ::: gds/src/collections/backends/huge/huge_char_array.rs:697:1
    |
697 | / huge_collections!(
698 | |     HugeCharArray,
699 | |     char,
700 | |     ValueType::Char,
...   |
705 | |     "Collections impl for HugeCharArray"
706 | | );
    | |_- in this macro invocation
    |
    = help: the following other types implement trait `From<T>`:
              `f64` implements `From<bool>`
              `f64` implements `From<f16>`
              `f64` implements `From<f32>`
              `f64` implements `From<i16>`
              `f64` implements `From<i32>`
              `f64` implements `From<i8>`
              `f64` implements `From<u16>`
              `f64` implements `From<u32>`
            and 3 others
    = note: required for `char` to implement `Into<f64>`
note: the requirement `char: Into<f64>` appears on the `impl`'s method `variance` but not on the corresponding trait's method
   --> gds/src/collections/traits/collections.rs:42:8
    |
 11 | pub trait Collections<T>: Send + Sync {
    |           ----------- in this trait
...
 42 |     fn variance(&self) -> Option<f64>;
    |        ^^^^^^^^ this trait's method doesn't have the requirement `char: Into<f64>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `f64: From<i64>` is not satisfied
    --> gds/src/collections/macros/backends/huge.rs:135:49
     |
 135 |   ...   fn mean(&self) -> Option<f64> where $element_type: Into<f64> { if self.size() == 0 { None } else { Some(self.iter().map(|x| x.into(...
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<i64>` is not implemented for `f64`
     |
    ::: gds/src/collections/backends/huge/huge_long_array.rs:1006:1
     |
1006 | / huge_collections!(
1007 | |     HugeLongArray,
1008 | |     i64,
1009 | |     ValueType::Long,
...    |
1014 | |     "Collections impl for HugeLongArray"
1015 | | );
     | |_- in this macro invocation
     |
     = help: the following other types implement trait `From<T>`:
               `f64` implements `From<bool>`
               `f64` implements `From<f16>`
               `f64` implements `From<f32>`
               `f64` implements `From<i16>`
               `f64` implements `From<i32>`
               `f64` implements `From<i8>`
               `f64` implements `From<u16>`
               `f64` implements `From<u32>`
             and 3 others
     = note: required for `i64` to implement `Into<f64>`
     = help: see issue #48214
     = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `f64: From<i64>` is not satisfied
    --> gds/src/collections/macros/backends/huge.rs:136:52
     |
 136 |   ...   fn std_dev(&self) -> Option<f64> where $element_type: Into<f64> { if self.size() < 2 { None } else { let m = self.mean()?; let v = ...
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<i64>` is not implemented for `f64`
     |
    ::: gds/src/collections/backends/huge/huge_long_array.rs:1006:1
     |
1006 | / huge_collections!(
1007 | |     HugeLongArray,
1008 | |     i64,
1009 | |     ValueType::Long,
...    |
1014 | |     "Collections impl for HugeLongArray"
1015 | | );
     | |_- in this macro invocation
     |
     = help: the following other types implement trait `From<T>`:
               `f64` implements `From<bool>`
               `f64` implements `From<f16>`
               `f64` implements `From<f32>`
               `f64` implements `From<i16>`
               `f64` implements `From<i32>`
               `f64` implements `From<i8>`
               `f64` implements `From<u16>`
               `f64` implements `From<u32>`
             and 3 others
     = note: required for `i64` to implement `Into<f64>`
     = help: see issue #48214
     = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `f64: From<i64>` is not satisfied
    --> gds/src/collections/macros/backends/huge.rs:137:53
     |
 137 |   ...   fn variance(&self) -> Option<f64> where $element_type: Into<f64> { if self.size() < 2 { None } else { let m = self.mean()?; Some(se...
     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<i64>` is not implemented for `f64`
     |
    ::: gds/src/collections/backends/huge/huge_long_array.rs:1006:1
     |
1006 | / huge_collections!(
1007 | |     HugeLongArray,
1008 | |     i64,
1009 | |     ValueType::Long,
...    |
1014 | |     "Collections impl for HugeLongArray"
1015 | | );
     | |_- in this macro invocation
     |
     = help: the following other types implement trait `From<T>`:
               `f64` implements `From<bool>`
               `f64` implements `From<f16>`
               `f64` implements `From<f32>`
               `f64` implements `From<i16>`
               `f64` implements `From<i32>`
               `f64` implements `From<i8>`
               `f64` implements `From<u16>`
               `f64` implements `From<u32>`
             and 3 others
     = note: required for `i64` to implement `Into<f64>`
     = help: see issue #48214
     = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: a value of type `bool` cannot be made by summing an iterator over elements of type `bool`
   --> gds/src/collections/macros/backends/huge.rs:134:58
    |
134 |               fn sum(&self) -> Option<$element_type> where $element_type: std::iter::Sum { Some(self.iter().sum()) }
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value of type `bool` cannot be made by summing a `std::iter::Iterator<Item=bool>`
    |
   ::: gds/src/collections/backends/huge/huge_boolean_array.rs:682:1
    |
682 | / huge_collections!(
683 | |     HugeBooleanArray,
684 | |     bool,
685 | |     ValueType::Boolean,
...   |
690 | |     "Collections impl for HugeBooleanArray"
691 | | );
    | |_- in this macro invocation
    |
    = help: the trait `Sum` is not implemented for `bool`
    = help: the following other types implement trait `Sum<A>`:
              `Duration` implements `Sum<&'a Duration>`
              `Duration` implements `Sum`
              `Result<T, E>` implements `Sum<Result<U, E>>`
              `Simd<f32, N>` implements `Sum<&'a Simd<f32, N>>`
              `Simd<f32, N>` implements `Sum`
              `Simd<f64, N>` implements `Sum<&'a Simd<f64, N>>`
              `Simd<f64, N>` implements `Sum`
              `Simd<i16, N>` implements `Sum<&'a Simd<i16, N>>`
            and 74 others
    = help: see issue #48214
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: a value of type `char` cannot be made by summing an iterator over elements of type `char`
   --> gds/src/collections/macros/backends/huge.rs:134:58
    |
134 |               fn sum(&self) -> Option<$element_type> where $element_type: std::iter::Sum { Some(self.iter().sum()) }
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value of type `char` cannot be made by summing a `std::iter::Iterator<Item=char>`
    |
   ::: gds/src/collections/backends/huge/huge_char_array.rs:697:1
    |
697 | / huge_collections!(
698 | |     HugeCharArray,
699 | |     char,
700 | |     ValueType::Char,
...   |
705 | |     "Collections impl for HugeCharArray"
706 | | );
    | |_- in this macro invocation
    |
    = help: the trait `Sum` is not implemented for `char`
    = help: the following other types implement trait `Sum<A>`:
              `Duration` implements `Sum<&'a Duration>`
              `Duration` implements `Sum`
              `Result<T, E>` implements `Sum<Result<U, E>>`
              `Simd<f32, N>` implements `Sum<&'a Simd<f32, N>>`
              `Simd<f32, N>` implements `Sum`
              `Simd<f64, N>` implements `Sum<&'a Simd<f64, N>>`
              `Simd<f64, N>` implements `Sum`
              `Simd<i16, N>` implements `Sum<&'a Simd<i16, N>>`
            and 74 others
    = help: see issue #48214
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `f64: From<char>` is not satisfied
   --> gds/src/collections/macros/backends/huge.rs:135:49
    |
135 |   ...   fn mean(&self) -> Option<f64> where $element_type: Into<f64> { if self.size() == 0 { None } else { Some(self.iter().map(|x| x.into(...
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<char>` is not implemented for `f64`
    |
   ::: gds/src/collections/backends/huge/huge_char_array.rs:697:1
    |
697 | / huge_collections!(
698 | |     HugeCharArray,
699 | |     char,
700 | |     ValueType::Char,
...   |
705 | |     "Collections impl for HugeCharArray"
706 | | );
    | |_- in this macro invocation
    |
    = help: the following other types implement trait `From<T>`:
              `f64` implements `From<bool>`
              `f64` implements `From<f16>`
              `f64` implements `From<f32>`
              `f64` implements `From<i16>`
              `f64` implements `From<i32>`
              `f64` implements `From<i8>`
              `f64` implements `From<u16>`
              `f64` implements `From<u32>`
            and 3 others
    = note: required for `char` to implement `Into<f64>`
    = help: see issue #48214
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `f64: From<char>` is not satisfied
   --> gds/src/collections/macros/backends/huge.rs:136:52
    |
136 |   ...   fn std_dev(&self) -> Option<f64> where $element_type: Into<f64> { if self.size() < 2 { None } else { let m = self.mean()?; let v = ...
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<char>` is not implemented for `f64`
    |
   ::: gds/src/collections/backends/huge/huge_char_array.rs:697:1
    |
697 | / huge_collections!(
698 | |     HugeCharArray,
699 | |     char,
700 | |     ValueType::Char,
...   |
705 | |     "Collections impl for HugeCharArray"
706 | | );
    | |_- in this macro invocation
    |
    = help: the following other types implement trait `From<T>`:
              `f64` implements `From<bool>`
              `f64` implements `From<f16>`
              `f64` implements `From<f32>`
              `f64` implements `From<i16>`
              `f64` implements `From<i32>`
              `f64` implements `From<i8>`
              `f64` implements `From<u16>`
              `f64` implements `From<u32>`
            and 3 others
    = note: required for `char` to implement `Into<f64>`
    = help: see issue #48214
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `f64: From<char>` is not satisfied
   --> gds/src/collections/macros/backends/huge.rs:137:53
    |
137 |   ...   fn variance(&self) -> Option<f64> where $element_type: Into<f64> { if self.size() < 2 { None } else { let m = self.mean()?; Some(se...
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<char>` is not implemented for `f64`
    |
   ::: gds/src/collections/backends/huge/huge_char_array.rs:697:1
    |
697 | / huge_collections!(
698 | |     HugeCharArray,
699 | |     char,
700 | |     ValueType::Char,
...   |
705 | |     "Collections impl for HugeCharArray"
706 | | );
    | |_- in this macro invocation
    |
    = help: the following other types implement trait `From<T>`:
              `f64` implements `From<bool>`
              `f64` implements `From<f16>`
              `f64` implements `From<f32>`
              `f64` implements `From<i16>`
              `f64` implements `From<i32>`
              `f64` implements `From<i8>`
              `f64` implements `From<u16>`
              `f64` implements `From<u32>`
            and 3 others
    = note: required for `char` to implement `Into<f64>`
    = help: see issue #48214
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: a value of type `bool` cannot be made by summing an iterator over elements of type `bool`
  --> gds/src/collections/macros/backends/vec.rs:87:58
   |
87 |             fn sum(&self) -> Option<$element_type> where $element_type: std::iter::Sum { None }
   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value of type `bool` cannot be made by summing a `std::iter::Iterator<Item=bool>`
   |
  ::: gds/src/collections/backends/vec/vec_boolean.rs:7:1
   |
 7 | vec_collections!(VecBoolean, bool, ValueType::Boolean, false, kind = OrdNoAgg);
   | ------------------------------------------------------------------------------ in this macro invocation
   |
   = help: the trait `Sum` is not implemented for `bool`
   = help: the following other types implement trait `Sum<A>`:
             `Duration` implements `Sum<&'a Duration>`
             `Duration` implements `Sum`
             `Result<T, E>` implements `Sum<Result<U, E>>`
             `Simd<f32, N>` implements `Sum<&'a Simd<f32, N>>`
             `Simd<f32, N>` implements `Sum`
             `Simd<f64, N>` implements `Sum<&'a Simd<f64, N>>`
             `Simd<f64, N>` implements `Sum`
             `Simd<i16, N>` implements `Sum<&'a Simd<i16, N>>`
           and 74 others
   = help: see issue #48214
   = note: this error originates in the macro `vec_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: a value of type `char` cannot be made by summing an iterator over elements of type `char`
  --> gds/src/collections/macros/backends/vec.rs:87:58
   |
87 |             fn sum(&self) -> Option<$element_type> where $element_type: std::iter::Sum { None }
   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value of type `char` cannot be made by summing a `std::iter::Iterator<Item=char>`
   |
  ::: gds/src/collections/backends/vec/vec_char.rs:7:1
   |
 7 | vec_collections!(VecChar, char, ValueType::Char, '\0', kind = OrdNoAgg);
   | ----------------------------------------------------------------------- in this macro invocation
   |
   = help: the trait `Sum` is not implemented for `char`
   = help: the following other types implement trait `Sum<A>`:
             `Duration` implements `Sum<&'a Duration>`
             `Duration` implements `Sum`
             `Result<T, E>` implements `Sum<Result<U, E>>`
             `Simd<f32, N>` implements `Sum<&'a Simd<f32, N>>`
             `Simd<f32, N>` implements `Sum`
             `Simd<f64, N>` implements `Sum<&'a Simd<f64, N>>`
             `Simd<f64, N>` implements `Sum`
             `Simd<i16, N>` implements `Sum<&'a Simd<i16, N>>`
           and 74 others
   = help: see issue #48214
   = note: this error originates in the macro `vec_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
    --> gds/src/collections/macros/backends/huge.rs:135:139
     |
 135 |   ....size() == 0 { None } else { Some(self.iter().map(|x| x.into()).sum::<f64>() / self.size() as f64) } }
     |                                                              ^^^^ cannot infer type
     |
    ::: gds/src/collections/backends/huge/huge_int_array.rs:1008:1
     |
1008 | / huge_collections!(
1009 | |     HugeIntArray,
1010 | |     i32,
1011 | |     ValueType::Int,
...    |
1016 | |     "Collections impl for HugeIntArray"
1017 | | );
     | |_- in this macro invocation
     |
     = note: multiple `impl`s satisfying `_: From<i32>` found in the following crates: `core`, `serde_json`, `std`:
             - impl From<i32> for AtomicI32;
             - impl From<i32> for Value;
             - impl From<i32> for f128;
             - impl From<i32> for f64;
             - impl From<i32> for i128;
             - impl From<i32> for i64;
             - impl From<i32> for serde_json::Number;
             - impl From<i32> for std::sys::process::unix::unix::ExitStatus;
     = note: required for `i32` to implement `Into<_>`
     = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
    --> gds/src/collections/macros/backends/huge.rs:136:176
     |
 136 |   ...= self.mean()?; let v = self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64; Some(v.sqrt()) } }
     |                                                              ^^^^ cannot infer type
     |
    ::: gds/src/collections/backends/huge/huge_int_array.rs:1008:1
     |
1008 | / huge_collections!(
1009 | |     HugeIntArray,
1010 | |     i32,
1011 | |     ValueType::Int,
...    |
1016 | |     "Collections impl for HugeIntArray"
1017 | | );
     | |_- in this macro invocation
     |
     = note: multiple `impl`s satisfying `_: From<i32>` found in the following crates: `core`, `serde_json`, `std`:
             - impl From<i32> for AtomicI32;
             - impl From<i32> for Value;
             - impl From<i32> for f128;
             - impl From<i32> for f64;
             - impl From<i32> for i128;
             - impl From<i32> for i64;
             - impl From<i32> for serde_json::Number;
             - impl From<i32> for std::sys::process::unix::unix::ExitStatus;
     = note: required for `i32` to implement `Into<_>`
     = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
    --> gds/src/collections/macros/backends/huge.rs:136:183
     |
 136 |   ....mean()?; let v = self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64; Some(v.sqrt()) } }
     |                                                               ^ cannot infer type
     |
    ::: gds/src/collections/backends/huge/huge_int_array.rs:1008:1
     |
1008 | / huge_collections!(
1009 | |     HugeIntArray,
1010 | |     i32,
1011 | |     ValueType::Int,
...    |
1016 | |     "Collections impl for HugeIntArray"
1017 | | );
     | |_- in this macro invocation
     |
     = note: multiple `impl`s satisfying `_: Sub<f64>` found in the following crates: `core`, `zerocopy`:
             - impl Sub for f64;
             - impl<'a> Sub<f64> for &'a f64;
             - impl<O> Sub<f64> for zerocopy::byteorder::F64<O>
               where O: zerocopy::byteorder::ByteOrder;
     = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
    --> gds/src/collections/macros/backends/huge.rs:137:174
     |
 137 |   ... m = self.mean()?; Some(self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64) } }
     |                                                              ^^^^ cannot infer type
     |
    ::: gds/src/collections/backends/huge/huge_int_array.rs:1008:1
     |
1008 | / huge_collections!(
1009 | |     HugeIntArray,
1010 | |     i32,
1011 | |     ValueType::Int,
...    |
1016 | |     "Collections impl for HugeIntArray"
1017 | | );
     | |_- in this macro invocation
     |
     = note: multiple `impl`s satisfying `_: From<i32>` found in the following crates: `core`, `serde_json`, `std`:
             - impl From<i32> for AtomicI32;
             - impl From<i32> for Value;
             - impl From<i32> for f128;
             - impl From<i32> for f64;
             - impl From<i32> for i128;
             - impl From<i32> for i64;
             - impl From<i32> for serde_json::Number;
             - impl From<i32> for std::sys::process::unix::unix::ExitStatus;
     = note: required for `i32` to implement `Into<_>`
     = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
    --> gds/src/collections/macros/backends/huge.rs:137:181
     |
 137 |   ...elf.mean()?; Some(self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64) } }
     |                                                               ^ cannot infer type
     |
    ::: gds/src/collections/backends/huge/huge_int_array.rs:1008:1
     |
1008 | / huge_collections!(
1009 | |     HugeIntArray,
1010 | |     i32,
1011 | |     ValueType::Int,
...    |
1016 | |     "Collections impl for HugeIntArray"
1017 | | );
     | |_- in this macro invocation
     |
     = note: multiple `impl`s satisfying `_: Sub<f64>` found in the following crates: `core`, `zerocopy`:
             - impl Sub for f64;
             - impl<'a> Sub<f64> for &'a f64;
             - impl<O> Sub<f64> for zerocopy::byteorder::F64<O>
               where O: zerocopy::byteorder::ByteOrder;
     = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
    --> gds/src/collections/macros/backends/huge.rs:135:139
     |
 135 |   ....size() == 0 { None } else { Some(self.iter().map(|x| x.into()).sum::<f64>() / self.size() as f64) } }
     |                                                              ^^^^ cannot infer type
     |
    ::: gds/src/collections/backends/huge/huge_long_array.rs:1006:1
     |
1006 | / huge_collections!(
1007 | |     HugeLongArray,
1008 | |     i64,
1009 | |     ValueType::Long,
...    |
1014 | |     "Collections impl for HugeLongArray"
1015 | | );
     | |_- in this macro invocation
     |
     = note: multiple `impl`s satisfying `_: From<i64>` found in the following crates: `core`, `serde_json`:
             - impl From<i64> for AtomicI64;
             - impl From<i64> for Value;
             - impl From<i64> for i128;
             - impl From<i64> for serde_json::Number;
     = note: required for `i64` to implement `Into<_>`
     = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
    --> gds/src/collections/macros/backends/huge.rs:136:176
     |
 136 |   ...= self.mean()?; let v = self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64; Some(v.sqrt()) } }
     |                                                              ^^^^ cannot infer type
     |
    ::: gds/src/collections/backends/huge/huge_long_array.rs:1006:1
     |
1006 | / huge_collections!(
1007 | |     HugeLongArray,
1008 | |     i64,
1009 | |     ValueType::Long,
...    |
1014 | |     "Collections impl for HugeLongArray"
1015 | | );
     | |_- in this macro invocation
     |
     = note: multiple `impl`s satisfying `_: From<i64>` found in the following crates: `core`, `serde_json`:
             - impl From<i64> for AtomicI64;
             - impl From<i64> for Value;
             - impl From<i64> for i128;
             - impl From<i64> for serde_json::Number;
     = note: required for `i64` to implement `Into<_>`
     = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
    --> gds/src/collections/macros/backends/huge.rs:136:183
     |
 136 |   ....mean()?; let v = self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64; Some(v.sqrt()) } }
     |                                                               ^ cannot infer type
     |
    ::: gds/src/collections/backends/huge/huge_long_array.rs:1006:1
     |
1006 | / huge_collections!(
1007 | |     HugeLongArray,
1008 | |     i64,
1009 | |     ValueType::Long,
...    |
1014 | |     "Collections impl for HugeLongArray"
1015 | | );
     | |_- in this macro invocation
     |
     = note: multiple `impl`s satisfying `_: Sub<f64>` found in the following crates: `core`, `zerocopy`:
             - impl Sub for f64;
             - impl<'a> Sub<f64> for &'a f64;
             - impl<O> Sub<f64> for zerocopy::byteorder::F64<O>
               where O: zerocopy::byteorder::ByteOrder;
     = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
    --> gds/src/collections/macros/backends/huge.rs:137:174
     |
 137 |   ... m = self.mean()?; Some(self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64) } }
     |                                                              ^^^^ cannot infer type
     |
    ::: gds/src/collections/backends/huge/huge_long_array.rs:1006:1
     |
1006 | / huge_collections!(
1007 | |     HugeLongArray,
1008 | |     i64,
1009 | |     ValueType::Long,
...    |
1014 | |     "Collections impl for HugeLongArray"
1015 | | );
     | |_- in this macro invocation
     |
     = note: multiple `impl`s satisfying `_: From<i64>` found in the following crates: `core`, `serde_json`:
             - impl From<i64> for AtomicI64;
             - impl From<i64> for Value;
             - impl From<i64> for i128;
             - impl From<i64> for serde_json::Number;
     = note: required for `i64` to implement `Into<_>`
     = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
    --> gds/src/collections/macros/backends/huge.rs:137:181
     |
 137 |   ...elf.mean()?; Some(self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64) } }
     |                                                               ^ cannot infer type
     |
    ::: gds/src/collections/backends/huge/huge_long_array.rs:1006:1
     |
1006 | / huge_collections!(
1007 | |     HugeLongArray,
1008 | |     i64,
1009 | |     ValueType::Long,
...    |
1014 | |     "Collections impl for HugeLongArray"
1015 | | );
     | |_- in this macro invocation
     |
     = note: multiple `impl`s satisfying `_: Sub<f64>` found in the following crates: `core`, `zerocopy`:
             - impl Sub for f64;
             - impl<'a> Sub<f64> for &'a f64;
             - impl<O> Sub<f64> for zerocopy::byteorder::F64<O>
               where O: zerocopy::byteorder::ByteOrder;
     = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:50:80
    |
 50 |                   if self.size() == 0 { None } else { Some(self.iter().map(|x| x.into()).sum::<f64>() / self.size() as f64) }
    |                                                                                  ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_double_array.rs:906:1
    |
906 | / huge_collections!(
907 | |     HugeDoubleArray,
908 | |     f64,
909 | |     ValueType::Double,
...   |
914 | |     "Collections impl for HugeDoubleArray"
915 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: From<f64>` found in the following crates: `core`, `serde_json`:
            - impl From<f64> for Value;
            - impl From<f64> for f128;
    = note: required for `f64` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:53:119
    |
 53 |   ...   if self.size() < 2 { None } else { let mean = self.mean()?; let var = self.iter().map(|x| { let d = x.into() - mean; d*d }).sum::<f...
    |                                                                                                               ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_double_array.rs:906:1
    |
906 | / huge_collections!(
907 | |     HugeDoubleArray,
908 | |     f64,
909 | |     ValueType::Double,
...   |
914 | |     "Collections impl for HugeDoubleArray"
915 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: From<f64>` found in the following crates: `core`, `serde_json`:
            - impl From<f64> for Value;
            - impl From<f64> for f128;
    = note: required for `f64` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:53:126
    |
 53 |   ...   if self.size() < 2 { None } else { let mean = self.mean()?; let var = self.iter().map(|x| { let d = x.into() - mean; d*d }).sum::<f...
    |                                                                                                                      ^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_double_array.rs:906:1
    |
906 | / huge_collections!(
907 | |     HugeDoubleArray,
908 | |     f64,
909 | |     ValueType::Double,
...   |
914 | |     "Collections impl for HugeDoubleArray"
915 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: Sub<f64>` found in the following crates: `core`, `zerocopy`:
            - impl Sub for f64;
            - impl<'a> Sub<f64> for &'a f64;
            - impl<O> Sub<f64> for zerocopy::byteorder::F64<O>
              where O: zerocopy::byteorder::ByteOrder;
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:56:114
    |
 56 |   ...   if self.size() < 2 { None } else { let mean = self.mean()?; Some(self.iter().map(|x| { let d = x.into() - mean; d*d }).sum::<f64>()...
    |                                                                                                          ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_double_array.rs:906:1
    |
906 | / huge_collections!(
907 | |     HugeDoubleArray,
908 | |     f64,
909 | |     ValueType::Double,
...   |
914 | |     "Collections impl for HugeDoubleArray"
915 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: From<f64>` found in the following crates: `core`, `serde_json`:
            - impl From<f64> for Value;
            - impl From<f64> for f128;
    = note: required for `f64` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:56:121
    |
 56 |   ...   if self.size() < 2 { None } else { let mean = self.mean()?; Some(self.iter().map(|x| { let d = x.into() - mean; d*d }).sum::<f64>()...
    |                                                                                                                 ^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_double_array.rs:906:1
    |
906 | / huge_collections!(
907 | |     HugeDoubleArray,
908 | |     f64,
909 | |     ValueType::Double,
...   |
914 | |     "Collections impl for HugeDoubleArray"
915 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: Sub<f64>` found in the following crates: `core`, `zerocopy`:
            - impl Sub for f64;
            - impl<'a> Sub<f64> for &'a f64;
            - impl<O> Sub<f64> for zerocopy::byteorder::F64<O>
              where O: zerocopy::byteorder::ByteOrder;
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:50:80
    |
 50 |                   if self.size() == 0 { None } else { Some(self.iter().map(|x| x.into()).sum::<f64>() / self.size() as f64) }
    |                                                                                  ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_float_array.rs:906:1
    |
906 | / huge_collections!(
907 | |     HugeFloatArray,
908 | |     f32,
909 | |     ValueType::Float,
...   |
914 | |     "Collections impl for HugeFloatArray"
915 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: From<f32>` found in the following crates: `core`, `serde_json`:
            - impl From<f32> for Value;
            - impl From<f32> for f128;
            - impl From<f32> for f64;
    = note: required for `f32` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:53:119
    |
 53 |   ...   if self.size() < 2 { None } else { let mean = self.mean()?; let var = self.iter().map(|x| { let d = x.into() - mean; d*d }).sum::<f...
    |                                                                                                               ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_float_array.rs:906:1
    |
906 | / huge_collections!(
907 | |     HugeFloatArray,
908 | |     f32,
909 | |     ValueType::Float,
...   |
914 | |     "Collections impl for HugeFloatArray"
915 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: From<f32>` found in the following crates: `core`, `serde_json`:
            - impl From<f32> for Value;
            - impl From<f32> for f128;
            - impl From<f32> for f64;
    = note: required for `f32` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:53:126
    |
 53 |   ...   if self.size() < 2 { None } else { let mean = self.mean()?; let var = self.iter().map(|x| { let d = x.into() - mean; d*d }).sum::<f...
    |                                                                                                                      ^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_float_array.rs:906:1
    |
906 | / huge_collections!(
907 | |     HugeFloatArray,
908 | |     f32,
909 | |     ValueType::Float,
...   |
914 | |     "Collections impl for HugeFloatArray"
915 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: Sub<f64>` found in the following crates: `core`, `zerocopy`:
            - impl Sub for f64;
            - impl<'a> Sub<f64> for &'a f64;
            - impl<O> Sub<f64> for zerocopy::byteorder::F64<O>
              where O: zerocopy::byteorder::ByteOrder;
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:56:114
    |
 56 |   ...   if self.size() < 2 { None } else { let mean = self.mean()?; Some(self.iter().map(|x| { let d = x.into() - mean; d*d }).sum::<f64>()...
    |                                                                                                          ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_float_array.rs:906:1
    |
906 | / huge_collections!(
907 | |     HugeFloatArray,
908 | |     f32,
909 | |     ValueType::Float,
...   |
914 | |     "Collections impl for HugeFloatArray"
915 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: From<f32>` found in the following crates: `core`, `serde_json`:
            - impl From<f32> for Value;
            - impl From<f32> for f128;
            - impl From<f32> for f64;
    = note: required for `f32` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:56:121
    |
 56 |   ...   if self.size() < 2 { None } else { let mean = self.mean()?; Some(self.iter().map(|x| { let d = x.into() - mean; d*d }).sum::<f64>()...
    |                                                                                                                 ^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_float_array.rs:906:1
    |
906 | / huge_collections!(
907 | |     HugeFloatArray,
908 | |     f32,
909 | |     ValueType::Float,
...   |
914 | |     "Collections impl for HugeFloatArray"
915 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: Sub<f64>` found in the following crates: `core`, `zerocopy`:
            - impl Sub for f64;
            - impl<'a> Sub<f64> for &'a f64;
            - impl<O> Sub<f64> for zerocopy::byteorder::F64<O>
              where O: zerocopy::byteorder::ByteOrder;
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:135:139
    |
135 |   ....size() == 0 { None } else { Some(self.iter().map(|x| x.into()).sum::<f64>() / self.size() as f64) } }
    |                                                              ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_byte_array.rs:494:1
    |
494 | / huge_collections!(
495 | |     HugeByteArray,
496 | |     i8,
497 | |     ValueType::Byte,
...   |
502 | |     "Collections impl for HugeByteArray"
503 | | );
    | |_- in this macro invocation
    |
    = note: cannot satisfy `_: From<i8>`
    = note: required for `i8` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:136:176
    |
136 |   ...= self.mean()?; let v = self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64; Some(v.sqrt()) } }
    |                                                              ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_byte_array.rs:494:1
    |
494 | / huge_collections!(
495 | |     HugeByteArray,
496 | |     i8,
497 | |     ValueType::Byte,
...   |
502 | |     "Collections impl for HugeByteArray"
503 | | );
    | |_- in this macro invocation
    |
    = note: cannot satisfy `_: From<i8>`
    = note: required for `i8` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:136:183
    |
136 |   ....mean()?; let v = self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64; Some(v.sqrt()) } }
    |                                                               ^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_byte_array.rs:494:1
    |
494 | / huge_collections!(
495 | |     HugeByteArray,
496 | |     i8,
497 | |     ValueType::Byte,
...   |
502 | |     "Collections impl for HugeByteArray"
503 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: Sub<f64>` found in the following crates: `core`, `zerocopy`:
            - impl Sub for f64;
            - impl<'a> Sub<f64> for &'a f64;
            - impl<O> Sub<f64> for zerocopy::byteorder::F64<O>
              where O: zerocopy::byteorder::ByteOrder;
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:137:174
    |
137 |   ... m = self.mean()?; Some(self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64) } }
    |                                                              ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_byte_array.rs:494:1
    |
494 | / huge_collections!(
495 | |     HugeByteArray,
496 | |     i8,
497 | |     ValueType::Byte,
...   |
502 | |     "Collections impl for HugeByteArray"
503 | | );
    | |_- in this macro invocation
    |
    = note: cannot satisfy `_: From<i8>`
    = note: required for `i8` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:137:181
    |
137 |   ...elf.mean()?; Some(self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64) } }
    |                                                               ^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_byte_array.rs:494:1
    |
494 | / huge_collections!(
495 | |     HugeByteArray,
496 | |     i8,
497 | |     ValueType::Byte,
...   |
502 | |     "Collections impl for HugeByteArray"
503 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: Sub<f64>` found in the following crates: `core`, `zerocopy`:
            - impl Sub for f64;
            - impl<'a> Sub<f64> for &'a f64;
            - impl<O> Sub<f64> for zerocopy::byteorder::F64<O>
              where O: zerocopy::byteorder::ByteOrder;
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:135:139
    |
135 |   ....size() == 0 { None } else { Some(self.iter().map(|x| x.into()).sum::<f64>() / self.size() as f64) } }
    |                                                              ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_short_array.rs:677:1
    |
677 | / huge_collections!(
678 | |     HugeShortArray,
679 | |     i16,
680 | |     ValueType::Short,
...   |
685 | |     "Collections impl for HugeShortArray"
686 | | );
    | |_- in this macro invocation
    |
    = note: cannot satisfy `_: From<i16>`
    = note: required for `i16` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:136:176
    |
136 |   ...= self.mean()?; let v = self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64; Some(v.sqrt()) } }
    |                                                              ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_short_array.rs:677:1
    |
677 | / huge_collections!(
678 | |     HugeShortArray,
679 | |     i16,
680 | |     ValueType::Short,
...   |
685 | |     "Collections impl for HugeShortArray"
686 | | );
    | |_- in this macro invocation
    |
    = note: cannot satisfy `_: From<i16>`
    = note: required for `i16` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:136:183
    |
136 |   ....mean()?; let v = self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64; Some(v.sqrt()) } }
    |                                                               ^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_short_array.rs:677:1
    |
677 | / huge_collections!(
678 | |     HugeShortArray,
679 | |     i16,
680 | |     ValueType::Short,
...   |
685 | |     "Collections impl for HugeShortArray"
686 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: Sub<f64>` found in the following crates: `core`, `zerocopy`:
            - impl Sub for f64;
            - impl<'a> Sub<f64> for &'a f64;
            - impl<O> Sub<f64> for zerocopy::byteorder::F64<O>
              where O: zerocopy::byteorder::ByteOrder;
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:137:174
    |
137 |   ... m = self.mean()?; Some(self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64) } }
    |                                                              ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_short_array.rs:677:1
    |
677 | / huge_collections!(
678 | |     HugeShortArray,
679 | |     i16,
680 | |     ValueType::Short,
...   |
685 | |     "Collections impl for HugeShortArray"
686 | | );
    | |_- in this macro invocation
    |
    = note: cannot satisfy `_: From<i16>`
    = note: required for `i16` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:137:181
    |
137 |   ...elf.mean()?; Some(self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64) } }
    |                                                               ^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_short_array.rs:677:1
    |
677 | / huge_collections!(
678 | |     HugeShortArray,
679 | |     i16,
680 | |     ValueType::Short,
...   |
685 | |     "Collections impl for HugeShortArray"
686 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: Sub<f64>` found in the following crates: `core`, `zerocopy`:
            - impl Sub for f64;
            - impl<'a> Sub<f64> for &'a f64;
            - impl<O> Sub<f64> for zerocopy::byteorder::F64<O>
              where O: zerocopy::byteorder::ByteOrder;
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:135:139
    |
135 |   ....size() == 0 { None } else { Some(self.iter().map(|x| x.into()).sum::<f64>() / self.size() as f64) } }
    |                                                              ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_boolean_array.rs:682:1
    |
682 | / huge_collections!(
683 | |     HugeBooleanArray,
684 | |     bool,
685 | |     ValueType::Boolean,
...   |
690 | |     "Collections impl for HugeBooleanArray"
691 | | );
    | |_- in this macro invocation
    |
    = note: cannot satisfy `_: From<bool>`
    = note: required for `bool` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:136:176
    |
136 |   ...= self.mean()?; let v = self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64; Some(v.sqrt()) } }
    |                                                              ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_boolean_array.rs:682:1
    |
682 | / huge_collections!(
683 | |     HugeBooleanArray,
684 | |     bool,
685 | |     ValueType::Boolean,
...   |
690 | |     "Collections impl for HugeBooleanArray"
691 | | );
    | |_- in this macro invocation
    |
    = note: cannot satisfy `_: From<bool>`
    = note: required for `bool` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:136:183
    |
136 |   ....mean()?; let v = self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64; Some(v.sqrt()) } }
    |                                                               ^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_boolean_array.rs:682:1
    |
682 | / huge_collections!(
683 | |     HugeBooleanArray,
684 | |     bool,
685 | |     ValueType::Boolean,
...   |
690 | |     "Collections impl for HugeBooleanArray"
691 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: Sub<f64>` found in the following crates: `core`, `zerocopy`:
            - impl Sub for f64;
            - impl<'a> Sub<f64> for &'a f64;
            - impl<O> Sub<f64> for zerocopy::byteorder::F64<O>
              where O: zerocopy::byteorder::ByteOrder;
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:137:174
    |
137 |   ... m = self.mean()?; Some(self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64) } }
    |                                                              ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_boolean_array.rs:682:1
    |
682 | / huge_collections!(
683 | |     HugeBooleanArray,
684 | |     bool,
685 | |     ValueType::Boolean,
...   |
690 | |     "Collections impl for HugeBooleanArray"
691 | | );
    | |_- in this macro invocation
    |
    = note: cannot satisfy `_: From<bool>`
    = note: required for `bool` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:137:181
    |
137 |   ...elf.mean()?; Some(self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64) } }
    |                                                               ^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_boolean_array.rs:682:1
    |
682 | / huge_collections!(
683 | |     HugeBooleanArray,
684 | |     bool,
685 | |     ValueType::Boolean,
...   |
690 | |     "Collections impl for HugeBooleanArray"
691 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: Sub<f64>` found in the following crates: `core`, `zerocopy`:
            - impl Sub for f64;
            - impl<'a> Sub<f64> for &'a f64;
            - impl<O> Sub<f64> for zerocopy::byteorder::F64<O>
              where O: zerocopy::byteorder::ByteOrder;
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0369]: cannot add `bool` to `bool`
   --> gds/src/collections/macros/backends/huge.rs:140:237
    |
140 |   ... v.sort(); let mid = v.len()/2; if v.len()%2==0 { Some((v[mid-1] + v[mid]) / 2) } else { Some(v[mid]) } } }
    |                                                              -------- ^ ------ bool
    |                                                              |
    |                                                              bool
    |
   ::: gds/src/collections/backends/huge/huge_boolean_array.rs:682:1
    |
682 | / huge_collections!(
683 | |     HugeBooleanArray,
684 | |     bool,
685 | |     ValueType::Boolean,
...   |
690 | |     "Collections impl for HugeBooleanArray"
691 | | );
    | |_- in this macro invocation
    |
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:135:139
    |
135 |   ....size() == 0 { None } else { Some(self.iter().map(|x| x.into()).sum::<f64>() / self.size() as f64) } }
    |                                                              ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_char_array.rs:697:1
    |
697 | / huge_collections!(
698 | |     HugeCharArray,
699 | |     char,
700 | |     ValueType::Char,
...   |
705 | |     "Collections impl for HugeCharArray"
706 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: From<char>` found in the following crates: `alloc`, `core`:
            - impl From<char> for std::string::String;
            - impl From<char> for u128;
            - impl From<char> for u32;
            - impl From<char> for u64;
    = note: required for `char` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:136:176
    |
136 |   ...= self.mean()?; let v = self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64; Some(v.sqrt()) } }
    |                                                              ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_char_array.rs:697:1
    |
697 | / huge_collections!(
698 | |     HugeCharArray,
699 | |     char,
700 | |     ValueType::Char,
...   |
705 | |     "Collections impl for HugeCharArray"
706 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: From<char>` found in the following crates: `alloc`, `core`:
            - impl From<char> for std::string::String;
            - impl From<char> for u128;
            - impl From<char> for u32;
            - impl From<char> for u64;
    = note: required for `char` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:136:183
    |
136 |   ....mean()?; let v = self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64; Some(v.sqrt()) } }
    |                                                               ^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_char_array.rs:697:1
    |
697 | / huge_collections!(
698 | |     HugeCharArray,
699 | |     char,
700 | |     ValueType::Char,
...   |
705 | |     "Collections impl for HugeCharArray"
706 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: Sub<f64>` found in the following crates: `core`, `zerocopy`:
            - impl Sub for f64;
            - impl<'a> Sub<f64> for &'a f64;
            - impl<O> Sub<f64> for zerocopy::byteorder::F64<O>
              where O: zerocopy::byteorder::ByteOrder;
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:137:174
    |
137 |   ... m = self.mean()?; Some(self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64) } }
    |                                                              ^^^^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_char_array.rs:697:1
    |
697 | / huge_collections!(
698 | |     HugeCharArray,
699 | |     char,
700 | |     ValueType::Char,
...   |
705 | |     "Collections impl for HugeCharArray"
706 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: From<char>` found in the following crates: `alloc`, `core`:
            - impl From<char> for std::string::String;
            - impl From<char> for u128;
            - impl From<char> for u32;
            - impl From<char> for u64;
    = note: required for `char` to implement `Into<_>`
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0283]: type annotations needed
   --> gds/src/collections/macros/backends/huge.rs:137:181
    |
137 |   ...elf.mean()?; Some(self.iter().map(|x| { let d = x.into() - m; d*d }).sum::<f64>() / (self.size() - 1) as f64) } }
    |                                                               ^ cannot infer type
    |
   ::: gds/src/collections/backends/huge/huge_char_array.rs:697:1
    |
697 | / huge_collections!(
698 | |     HugeCharArray,
699 | |     char,
700 | |     ValueType::Char,
...   |
705 | |     "Collections impl for HugeCharArray"
706 | | );
    | |_- in this macro invocation
    |
    = note: multiple `impl`s satisfying `_: Sub<f64>` found in the following crates: `core`, `zerocopy`:
            - impl Sub for f64;
            - impl<'a> Sub<f64> for &'a f64;
            - impl<O> Sub<f64> for zerocopy::byteorder::F64<O>
              where O: zerocopy::byteorder::ByteOrder;
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0369]: cannot add `char` to `char`
   --> gds/src/collections/macros/backends/huge.rs:140:237
    |
140 |   ... v.sort(); let mid = v.len()/2; if v.len()%2==0 { Some((v[mid-1] + v[mid]) / 2) } else { Some(v[mid]) } } }
    |                                                              -------- ^ ------ char
    |                                                              |
    |                                                              char
    |
   ::: gds/src/collections/backends/huge/huge_char_array.rs:697:1
    |
697 | / huge_collections!(
698 | |     HugeCharArray,
699 | |     char,
700 | |     ValueType::Char,
...   |
705 | |     "Collections impl for HugeCharArray"
706 | | );
    | |_- in this macro invocation
    |
    = note: this error originates in the macro `huge_collections` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused import: `crate::collections::traits::Collections`
 --> gds/src/collections/backends/vec/vec_int.rs:3:5
  |
3 | use crate::collections::traits::Collections;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::collections::traits::Collections`
 --> gds/src/collections/backends/vec/vec_long.rs:3:5
  |
3 | use crate::collections::traits::Collections;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::collections::traits::Collections`
 --> gds/src/collections/backends/vec/vec_double.rs:3:5
  |
3 | use crate::collections::traits::Collections;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::collections::traits::Collections`
 --> gds/src/collections/backends/vec/vec_float.rs:3:5
  |
3 | use crate::collections::traits::Collections;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `data_size`
   --> gds/src/collections/extensions/compression.rs:516:9
    |
516 |         data_size: usize,
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_data_size`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `data_size`
   --> gds/src/collections/extensions/compression.rs:531:9
    |
531 |         data_size: usize,
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_data_size`

warning: unused variable: `value`
   --> gds/src/collections/extensions/stack.rs:349:38
    |
349 |     fn convert_to_stack_value(&self, value: T) -> Result<i64, StackError> {
    |                                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `value`
   --> gds/src/collections/extensions/stack.rs:356:40
    |
356 |     fn convert_from_stack_value(&self, value: i64) -> Option<T> {
    |                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `rng`
   --> gds/src/collections/extensions/random.rs:328:37
    |
328 |     fn generate_random_value_static(rng: &mut SplittableRandom) -> Result<T, RandomError> {
    |                                     ^^^ help: if this is intentional, prefix it with an underscore: `_rng`

warning: unused variable: `collection_size`
   --> gds/src/collections/extensions/random.rs:384:35
    |
384 |     pub fn estimate_random_memory(collection_size: usize) -> usize {
    |                                   ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_collection_size`

warning: unused variable: `collection_size`
   --> gds/src/collections/extensions/partitioning.rs:644:9
    |
644 |         collection_size: usize,
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_collection_size`

warning: unused variable: `capacity`
   --> gds/src/collections/adapter/universal.rs:213:22
    |
213 |     fn with_capacity(capacity: usize) -> Self where Self: Sized {
    |                      ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_capacity`

warning: unused variable: `count`
   --> gds/src/collections/adapter/universal.rs:219:22
    |
219 |     fn with_defaults(count: usize, default_value: T) -> Self where Self: Sized {
    |                      ^^^^^ help: if this is intentional, prefix it with an underscore: `_count`

warning: unused variable: `default_value`
   --> gds/src/collections/adapter/universal.rs:219:36
    |
219 |     fn with_defaults(count: usize, default_value: T) -> Self where Self: Sized {
    |                                    ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_default_value`

warning: unused variable: `config`
  --> gds/src/collections/adapter/factory.rs:15:51
   |
15 |     pub fn create<T>(backend: CollectionsBackend, config: CollectionsConfig<T>) -> Box<dyn Collections<T>> 
   |                                                   ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `config`
  --> gds/src/collections/adapter/factory.rs:57:13
   |
57 |         let config = CollectionsConfig::<T>::default();
   |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `backend`
  --> gds/src/collections/adapter/factory.rs:53:24
   |
53 |     pub fn from_vec<T>(backend: CollectionsBackend, values: Vec<T>) -> Box<dyn Collections<T>> 
   |                        ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_backend`

warning: unused variable: `values`
  --> gds/src/collections/adapter/factory.rs:53:53
   |
53 |     pub fn from_vec<T>(backend: CollectionsBackend, values: Vec<T>) -> Box<dyn Collections<T>> 
   |                                                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_values`

warning: unused variable: `config`
  --> gds/src/collections/adapter/factory.rs:67:13
   |
67 |         let config = CollectionsConfig::<T>::default();
   |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `backend`
  --> gds/src/collections/adapter/factory.rs:63:26
   |
63 |     pub fn from_slice<T>(backend: CollectionsBackend, slice: &[T]) -> Box<dyn Collections<T>> 
   |                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_backend`

warning: unused variable: `slice`
  --> gds/src/collections/adapter/factory.rs:63:55
   |
63 |     pub fn from_slice<T>(backend: CollectionsBackend, slice: &[T]) -> Box<dyn Collections<T>> 
   |                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_slice`

warning: unused variable: `config`
  --> gds/src/collections/adapter/factory.rs:77:13
   |
77 |         let config = CollectionsConfig::<T>::default();
   |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `backend`
  --> gds/src/collections/adapter/factory.rs:73:29
   |
73 |     pub fn with_defaults<T>(backend: CollectionsBackend, count: usize, default_value: T) -> Box<dyn Collections<T>> 
   |                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_backend`

warning: unused variable: `count`
  --> gds/src/collections/adapter/factory.rs:73:58
   |
73 |     pub fn with_defaults<T>(backend: CollectionsBackend, count: usize, default_value: T) -> Box<dyn Collections<T>> 
   |                                                          ^^^^^ help: if this is intentional, prefix it with an underscore: `_count`

warning: unused variable: `default_value`
  --> gds/src/collections/adapter/factory.rs:73:72
   |
73 |     pub fn with_defaults<T>(backend: CollectionsBackend, count: usize, default_value: T) -> Box<dyn Collections<T>> 
   |                                                                        ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_default_value`

Some errors have detailed explanations: E0277, E0283, E0369.
For more information about an error, try `rustc --explain E0277`.
warning: `gds` (lib) generated 46 warnings
error: could not compile `gds` (lib) due to 58 previous errors; 46 warnings emitted
