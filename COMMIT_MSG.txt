refactor(codegen): Five-Fold reorganization - Perfection over Compatibility

BREAKING CHANGE: Codegen module completely reorganized into clear architecture

## Summary

Reorganized `src/projection/codegen/` from flat 15-file mess into clean
Five-Fold Brahmachakra structure. Deleted ALL old files and updated ALL
imports in one clean sweep. No backwards compatibility cruft.

## The Five-Fold Structure

```
src/projection/codegen/
├── macros/          → Code generation TOOLS (6 files)
├── descriptors/     → Compile-time SCHEMAS (10 files, property at center)
├── runtime/         → Execution CONTRACTS (3 files)
├── transforms/      → Cross-cutting conversions (4 files)
└── procedure/       → Algorithm CONTRACT (2 files)
```

## Critical Architecture Win

Moved `algorithm_spec.rs` from eval/procedure to codegen/procedure:
- THE CONTRACT now lives with the macros that generate against it
- Clear separation: codegen (contract) vs eval (executor runtime)
- Locality of reference: generators + trait together

## Changes

### Deleted (20 files)
- 12 old codegen root files (computation_descriptor.rs, storage_descriptor.rs, etc.)
- 5 old ML files + directory (ml/model_descriptor.rs, etc.)
- 3 duplicate macros (algorithm_macro.rs, config_macro.rs in wrong location)
- 1 algorithm_spec.rs from eval/procedure (moved to codegen/procedure)

### Created (28 new files in organized structure)
- macros/ (6 files): eval_macro.rs, config.rs, procedure/{algorithm.rs, config.rs}
- descriptors/ (10 files): property.rs, computation.rs, storage.rs, pipeline.rs, ml/*
- runtime/ (3 files): computation.rs, storage.rs
- transforms/ (4 files): type_projector.rs, type_validator.rs, functors.rs
- procedure/ (2 files): algorithm_spec.rs, mod.rs

### Modified (8 files)
- codegen/mod.rs: Clean Five-Fold re-exports only
- codegen/procedure/mod.rs: Re-export contract + helpers
- eval/procedure/mod.rs: Import AlgorithmSpec from codegen
- eval/procedure/executor.rs: Updated imports
- eval/procedure/result_consumer.rs: Updated imports
- projection/mod.rs: Updated re-exports
- runtime/computation.rs: Updated descriptor imports (2 places)
- transforms/type_projector.rs: Fixed 50+ test imports

## Import Migration

Old paths (deleted):
```rust
use crate::projection::codegen::property_descriptor::*;
use crate::projection::codegen::computation_descriptor::*;
use super::algorithm_spec::*;  // from eval/procedure
```

New paths (clean):
```rust
use crate::projection::codegen::descriptors::property::*;
use crate::projection::codegen::descriptors::computation::*;
use crate::projection::codegen::procedure::*;  // THE CONTRACT
```

## Verification

```
✅ cargo build              → SUCCESS
✅ cargo test --lib         → ALL 1894 TESTS PASS
✅ eval/procedure/          → 7 files (executor runtime intact)
✅ codegen/                 → 28 files (Five-Fold structure)
✅ Old files                → 0 files (all deleted)
✅ Duplicates               → 0 files (cleaned up)
✅ Backwards compatibility  → 0 bytes (perfection over compatibility)
```

## Philosophy: Perfection Over Compatibility

Instead of gradual migration with backwards compatibility:
- Deleted ALL old files immediately
- Updated ALL imports in one sweep
- Clean break, no legacy cruft
- Compiler errors guided the fixes
- Result: Pure, clear architecture

## Documentation

- doc/TP-007_CODEGEN_REORGANIZATION_PLAN.md (400+ lines, comprehensive plan)
- doc/TP-007_PHASE1_COMPLETE.md (Phase 1 completion report)
- doc/TP-007_PHASE2_COMPLETE.md (Phase 2 completion report)
- doc/TP-007_PROCEDURE_CLEANUP.md (Duplicate macro cleanup)
- doc/TP-007_CURRENT_STATE_REVIEW.md (Architecture review)

## Impact

- Algorithm implementations now have clear import paths
- Macros grouped with related functionality
- Descriptors organized by domain (ML vs core)
- Runtime contracts separated from code generation
- Clear separation: CONTRACT (codegen) vs EXECUTOR (eval)

Ref: TP-007
Co-authored-by: GitHub Copilot
